import numpy as np


from sources.problem_formulation.SensorNetworkDesign import SensorNetworkDesign


def example_1():
    """
    Esta funcion crea el ejemplo 1(ejemplo1_pse.m) del codigo de mercedes usando la clase SensorNetwrokDesign
    :return:
    """
    costo = np.array([3.7, 4.5, 132.2, 129.2, 65.3, 132.4, 5, 193.9, 2.06, 62.8, 20.2, 80, 130.4, 109.8, 71.6, 29.7,
                      39.5, 20.4, 11.1, 13.6, 102.9, 8.1, 6.3, 55.5, 101.0, 93.7, 84.7, 85.4])
    costo = costo * 1.57

    mpa = np.array([0.0215, 0.025, 2.8, 2.749, 1.332, 2.807, 0.058, 4.101, 0.0215, 1.31, 0.3715, 1.682, 2.782, 2.296,
                    1.5, 0.591, 0.8182, 0.4057, 0.1987, 0.2625, 2.182, 0.1362, 0.0648, 1.166, 2.136, 2.033, 1.769,
                    1.806])

    t = np.array([0.86, 1.0, 111.82, 109.95, 53.27, 112.27, 2.32, 164.05, 0.86, 52.41, 14.86, 67.27, 111.27, 91.86,
                  60.0, 23.64, 32.73, 16.23, 7.95, 10.5, 87.27, 5.45, 2.59, 46.64, 85.45, 81.32, 70.77, 72.23])

    req = np.array([3, 8, 9, 17, 20, 21, 24, 25])
    req = req - 1

    cotaexact = np.array([float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'),
                          float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'),
                          float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'),
                          float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'),
                          float('inf'), float('inf'), float('inf'), float('inf')])

    cotaexact[2] = 2 * t[2] / 100
    cotaexact[7] = 2 * t[7] / 100
    cotaexact[20] = 2 * t[20] / 100
    cotaexact[23] = 2 * t[23] / 100

    d = np.zeros((11, 28))
    d[0, 0] = 1
    d[0, 1] = 1
    d[0, 2] = -1
    d[0, 3] = 1
    d[1, 5] = -1
    d[1, 6] = 1
    d[1, 7] = 1
    d[1, 8] = -1
    d[1, 4] = -1
    d[2, 0] = -1
    d[2, 4] = 1
    d[2, 9] = -1
    d[3, 9] = 1
    d[3, 10] = 1
    d[3, 11] = -1
    d[4, 2] = 1
    d[4, 10] = -1
    d[4, 12] = 1
    d[4, 13] = -1
    d[4, 14] = -1
    d[4, 15] = -1
    d[4, 16] = -1
    d[5, 1] = -1
    d[5, 5] = 1
    d[5, 12] = -1
    d[6, 6] = -1
    d[6, 13] = 1
    d[6, 17] = 1
    d[6, 18] = -1
    d[6, 19] = -1
    d[6, 20] = -1
    d[7, 14] = 1
    d[7, 17] = -1
    d[7, 21] = 1
    d[7, 22] = -1
    d[7, 23] = -1
    d[8, 11] = 1
    d[8, 15] = 1
    d[8, 21] = -1
    d[8, 24] = -1
    d[9, 18] = 1
    d[9, 22] = 1
    d[9, 26] = 1
    d[9, 25] = -1
    d[10, 7] = -1
    d[10, 19] = 1
    d[10, 25] = 1
    d[10, 27] = 1

    return SensorNetworkDesign(costo, d, mpa, req, cotaexact)


def case_2():
    """
    Esta funcion crea el ejemplo 2(ejemplo2_pse.m) del codigo de mercedes usando la clase SensorNetwrokDesign
    :return:
    """

    f = np.zeros(52)
    f[0: 10] = [413349, 419579, 209313, 210262, 419579, 460520, 26510, 230650, 229870, 26243]
    f[10: 20] = [413650, 413650, 206932, 206717, 413650, 27068, 5124, 21467, 478, 61562]
    f[20: 30] = [60985, 61253, 61490, 61109, 60796, 62012, 60413, 103939, 386580, 57169]
    f[30: 40] = [45829, 4202, 26133, 73900, 73704, 50851, 50715, 45902, 45878, 45928]
    f[40: 52] = [45851, 185593, 38557, 18932, 19846, 23880, 18196, 18106, 48081, 15154, 20268, 12659]

    A = np.zeros((19, 52))
    A[0, 0] = 1
    A[0, 1] = -1

    A[1, 1] = 1
    A[1, 2] = -1
    A[1, 3] = -1

    A[2, 2] = 1
    A[2, 3] = 1
    A[2, 4] = -1

    A[3, 5] = -1
    A[3, 4] = 1
    A[3, 6] = 1

    A[4, 5] = 1
    A[4, 7] = -1
    A[4, 8] = -1

    A[5, 7] = 1
    A[5, 8] = 1
    A[5, 6] = -1
    A[5, 9] = -1
    A[5, 10] = -1

    A[6, 10] = 1
    A[6, 11] = -1

    A[7, 11] = 1
    A[7, 12] = -1
    A[7, 13] = -1

    A[8, 12] = 1
    A[8, 13] = 1
    A[8, 14] = -1

    A[9, 14] = 1
    A[9, 27] = 1
    A[9, 15] = -1
    A[9, 19:27] = -1

    A[10, 15] = 1
    A[10, 16] = -1
    A[10, 17] = -1
    A[10, 18] = -1

    A[11, 19:27] = 1
    A[11, 27] = -1
    A[11, 28] = -1

    A[12, 28] = 1
    A[12, 29] = -1
    A[12, 32] = -1
    A[12, 33] = -1
    A[12, 35] = -1
    A[12, 37:41] = -1

    A[13, 29] = 1
    A[13, 30] = -1
    A[13, 31] = -1

    A[14, 33] = 1
    A[14, 34] = -1

    A[15, 35] = 1
    A[15, 36] = -1

    A[16, 37:41] = 1
    A[16, 41] = -1

    A[17, 41] = 1
    A[17, 42] = -1
    A[17, 43] = -1
    A[17, 44] = -1
    A[17, 45] = -1
    A[17, 46] = -1
    A[17, 47] = -1
    A[17, 48] = -1

    A[18, 48] = 1
    A[18, 49] = -1
    A[18, 50] = -1
    A[18, 51] = -1

    costo = (2.089+2*f)/1000
    mpa = 2*f/100

    cotaexact = np.ones(52)*float('inf')
    cotaexact[14] = 3 * f[14] / 100
    cotaexact[30] = 3 * f[30] / 100
    cotaexact[31] = 3 * f[31] / 100
    cotaexact[39] = 3 * f[39] / 100
    cotaexact[43] = 3 * f[43] / 100
    cotaexact[44] = 3 * f[44] / 100
    cotaexact[45] = 3 * f[45] / 100
    cotaexact[46] = 3 * f[46] / 100
    cotaexact[48] = 3 * f[48] / 100

    req = np.array([1, 4, 14, 28, 30, 31, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51])

    return SensorNetworkDesign(costo, A, mpa, req, cotaexact)


def case_3():
    f = np.zeros(82)
    f[0:10] = 1.e4 * np.array([4, 2.347, 6.347, 6.347, 1.556, 7.903, 7.903, 7.903, 7.921, 7.921])
    f[10:20] = 1.e4 * np.array([7.903, 7.921, 7.921, 6.725, 1.178, 7.903, 6.798, 6.449, 6.429, 6.449])
    f[20:30] = 1.e4 * np.array([199.2e-4, 6.429, 6.424, 6.421, 6.532e-4, 6.421, 3.589, 2.832, 3.589, 1.952])
    f[30:40] = [1.637e4, 4.47e4, 1.952e4, 9959., 9561., 1.191e4, 8912., 5.725e4, 7.903e4, 1.887e4]
    f[40:50] = [1.887e4, 1.034e4, 8535., 341.4, 8194., 390.8, 732.2, 1.034e4, 732.2, 6136]
    f[50:59] = [6136, 6223, 4113, 3723, 87.12, 6136, 6223, 1483, 5.577e4]
    f[59:69] = [3.218e4, 2.359e4, 964.7, 518.7, 364.2, 154.5, 1.952e4, 2.359e4, 28.03, 6.422e4]
    f[69:78] = [6.422e4, 2.832e4, 6.429e4, 6.424e4, 44.89, 6136, 6136, 732.2, 732.1]
    f[78:82] = [6136, 732.2, 2.359e4, 6136]

    A = np.zeros((47, 82))
    A[0, 0] = 1
    A[0, 1] = 1
    A[0, 2] = -1

    A[1, 2] = 1
    A[1, 3] = -1

    A[2, 3] = 1
    A[2, 4] = 1
    A[2, 5] = -1

    A[3, 5] = 1
    A[3, 6] = -1

    A[4, 6] = 1
    A[4, 7] = -1

    A[5, 8] = 1
    A[5, 9] = -1

    A[6, 7] = 1
    A[6, 38] = -1

    A[7, 9] = 1
    A[7, 38] = 1
    A[7, 10] = -1
    A[7, 11] = -1

    A[8, 11] = 1
    A[8, 12] = -1

    A[9, 10] = 1
    A[9, 15] = -1

    A[10, 15] = 1
    A[10, 13] = -1
    A[10, 14] = -1

    A[11, 13] = 1
    A[11, 77] = 1
    A[11, 16] = -1

    A[12, 16] = 1
    A[12, 17] = -1

    A[13, 17] = 1
    A[13, 19] = -1

    A[14, 19] = 1
    A[14, 18] = -1
    A[14, 20] = -1

    A[15, 71] = 1
    A[15, 21] = -1

    A[16, 21] = 1
    A[16, 72] = -1
    A[16, 73] = -1

    A[17, 80] = 1
    A[17, 79] = 1
    A[17, 78] = 1
    A[17, 18] = 1
    A[17, 71] = -1
    A[17, 1] = -1
    A[17, 77] = -1
    A[17, 75] = -1

    A[18, 76] = 1
    A[18, 66] = 1
    A[18, 81] = 1
    A[18, 72] = 1
    A[18, 22] = -1
    A[18, 78] = -1
    A[18, 79] = -1
    A[18, 80] = -1

    A[19, 22] = 1
    A[19, 68] = -1
    A[19, 67] = -1

    A[20, 69] = 1
    A[20, 23] = -1
    A[20, 24] = -1

    A[21, 74] = 1
    A[21, 60] = 1
    A[21, 23] = 1
    A[21, 81] = -1
    A[21, 66] = -1
    A[21, 25] = -1

    A[22, 25] = 1
    A[22, 26] = -1
    A[22, 27] = -1

    A[23, 26] = 1
    A[23, 28] = -1

    A[24, 27] = 1
    A[24, 24] = 1
    A[24, 70] = -1

    A[25, 28] = 1
    A[25, 29] = -1
    A[25, 30] = -1

    A[26, 30] = 1
    A[26, 70] = 1
    A[26, 31] = -1

    A[27, 48] = 1
    A[27, 50] = 1
    A[27, 29] = 1
    A[27, 65] = -1
    A[27, 76] = -1
    A[27, 74] = -1

    A[28, 65] = 1
    A[28, 32] = -1

    A[29, 32] = 1
    A[29, 33] = -1
    A[29, 34] = -1

    A[30, 31] = 1
    A[30, 34] = 1
    A[30, 35] = 1
    A[30, 36] = -1
    A[30, 37] = -1

    A[31, 33] = 1
    A[31, 36] = 1
    A[31, 39] = -1

    A[32, 39] = 1
    A[32, 40] = -1

    A[33, 40] = 1
    A[33, 41] = -1
    A[33, 42] = -1

    A[34, 42] = 1
    A[34, 43] = -1
    A[34, 44] = -1

    A[35, 43] = 1
    A[35, 45] = 1
    A[35, 46] = -1

    A[36, 52] = 1
    A[36, 45] = -1
    A[36, 53] = -1

    A[37, 53] = 1
    A[37, 44] = 1
    A[37, 35] = -1

    A[38, 56] = 1
    A[38, 49] = 1
    A[38, 46] = 1
    A[38, 41] = 1
    A[38, 47] = -1
    A[38, 51] = -1
    A[38, 50] = -1
    A[38, 48] = -1

    A[39, 51] = 1
    A[39, 55] = -1
    A[39, 54] = -1

    A[40, 55] = 1
    A[40, 49] = -1

    A[41, 47] = 1
    A[41, 56] = -1
    A[41, 52] = -1

    A[42, 37] = 1
    A[42, 58] = -1
    A[42, 57] = -1

    A[43, 58] = 1
    A[43, 59] = -1
    A[43, 60] = -1

    A[44, 57] = 1
    A[44, 62] = -1
    A[44, 61] = -1

    A[45, 62] = 1
    A[45, 63] = -1
    A[45, 64] = -1

    A[46, 68] = 1
    A[46, 69] = -1

    costo = (2.089 + 2*f)/10
    mpa = 2*f/100

    cotaexact = np.ones(82)*float('inf')
    cotaexact[10] = 1.8 * f[10] / 100
    cotaexact[34] = 1.8 * f[34] / 100
    cotaexact[38] = 1.8 * f[38] / 100
    cotaexact[57] = 1.8 * f[57] / 100
    cotaexact[59] = 1.8 * f[59] / 100
    cotaexact[80] = 1.8 * f[80] / 100

    req = np.array([3, 10, 20, 23, 29, 31, 34, 38, 42, 43, 51, 57, 59, 67, 74, 79, 80])

    return SensorNetworkDesign(costo, A, mpa, req, cotaexact)



